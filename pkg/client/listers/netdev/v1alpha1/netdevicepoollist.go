/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zshi-redhat/network-device-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetDevicePoolListLister helps list NetDevicePoolLists.
// All objects returned here must be treated as read-only.
type NetDevicePoolListLister interface {
	// List lists all NetDevicePoolLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetDevicePoolList, err error)
	// NetDevicePoolLists returns an object that can list and get NetDevicePoolLists.
	NetDevicePoolLists(namespace string) NetDevicePoolListNamespaceLister
	NetDevicePoolListListerExpansion
}

// netDevicePoolListLister implements the NetDevicePoolListLister interface.
type netDevicePoolListLister struct {
	indexer cache.Indexer
}

// NewNetDevicePoolListLister returns a new NetDevicePoolListLister.
func NewNetDevicePoolListLister(indexer cache.Indexer) NetDevicePoolListLister {
	return &netDevicePoolListLister{indexer: indexer}
}

// List lists all NetDevicePoolLists in the indexer.
func (s *netDevicePoolListLister) List(selector labels.Selector) (ret []*v1alpha1.NetDevicePoolList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetDevicePoolList))
	})
	return ret, err
}

// NetDevicePoolLists returns an object that can list and get NetDevicePoolLists.
func (s *netDevicePoolListLister) NetDevicePoolLists(namespace string) NetDevicePoolListNamespaceLister {
	return netDevicePoolListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetDevicePoolListNamespaceLister helps list and get NetDevicePoolLists.
// All objects returned here must be treated as read-only.
type NetDevicePoolListNamespaceLister interface {
	// List lists all NetDevicePoolLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetDevicePoolList, err error)
	// Get retrieves the NetDevicePoolList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetDevicePoolList, error)
	NetDevicePoolListNamespaceListerExpansion
}

// netDevicePoolListNamespaceLister implements the NetDevicePoolListNamespaceLister
// interface.
type netDevicePoolListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetDevicePoolLists in the indexer for a given namespace.
func (s netDevicePoolListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetDevicePoolList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetDevicePoolList))
	})
	return ret, err
}

// Get retrieves the NetDevicePoolList from the indexer for a given namespace and name.
func (s netDevicePoolListNamespaceLister) Get(name string) (*v1alpha1.NetDevicePoolList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("netdevicepoollist"), name)
	}
	return obj.(*v1alpha1.NetDevicePoolList), nil
}
