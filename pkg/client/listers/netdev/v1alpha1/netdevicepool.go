/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/zshi-redhat/network-device-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetDevicePoolLister helps list NetDevicePools.
// All objects returned here must be treated as read-only.
type NetDevicePoolLister interface {
	// List lists all NetDevicePools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetDevicePool, err error)
	// NetDevicePools returns an object that can list and get NetDevicePools.
	NetDevicePools(namespace string) NetDevicePoolNamespaceLister
	NetDevicePoolListerExpansion
}

// netDevicePoolLister implements the NetDevicePoolLister interface.
type netDevicePoolLister struct {
	indexer cache.Indexer
}

// NewNetDevicePoolLister returns a new NetDevicePoolLister.
func NewNetDevicePoolLister(indexer cache.Indexer) NetDevicePoolLister {
	return &netDevicePoolLister{indexer: indexer}
}

// List lists all NetDevicePools in the indexer.
func (s *netDevicePoolLister) List(selector labels.Selector) (ret []*v1alpha1.NetDevicePool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetDevicePool))
	})
	return ret, err
}

// NetDevicePools returns an object that can list and get NetDevicePools.
func (s *netDevicePoolLister) NetDevicePools(namespace string) NetDevicePoolNamespaceLister {
	return netDevicePoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetDevicePoolNamespaceLister helps list and get NetDevicePools.
// All objects returned here must be treated as read-only.
type NetDevicePoolNamespaceLister interface {
	// List lists all NetDevicePools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetDevicePool, err error)
	// Get retrieves the NetDevicePool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetDevicePool, error)
	NetDevicePoolNamespaceListerExpansion
}

// netDevicePoolNamespaceLister implements the NetDevicePoolNamespaceLister
// interface.
type netDevicePoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetDevicePools in the indexer for a given namespace.
func (s netDevicePoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetDevicePool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetDevicePool))
	})
	return ret, err
}

// Get retrieves the NetDevicePool from the indexer for a given namespace and name.
func (s netDevicePoolNamespaceLister) Get(name string) (*v1alpha1.NetDevicePool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("netdevicepool"), name)
	}
	return obj.(*v1alpha1.NetDevicePool), nil
}
